is_paused = False
#is_paused = True

# 交易和市场相关参数
def set_trade_and_market_params():
    global profit1, profit2, Trailing_take_profit, Slippage, callback
    profit1 = 0.01
    profit2 = 0.002
    Trailing_take_profit = 0.005
    Slippage = 0.002
    callback = 100 * Slippage

# 量化交易和策略参数
def set_quantitative_strategy_params():
    global leverage, interval_ssbb, interval, limit, limit_test, martingale, pmom, nmom, ssbb_logic_enabled, \
    price_change_enabled, cost_price_logic_enabled, technical_indicators_enabled, macd_signal_enabled, \
    trading_strategy_enabled
    leverage = 1.01
    interval_ssbb = "15m"
    interval = "3m"
    limit = 960
    limit_test = 1344
    martingale = 1.01
    pmom = 66
    nmom = 30
    ssbb_logic_enabled = 1
    price_change_enabled = 1
    cost_price_logic_enabled = 1
    technical_indicators_enabled = 1
    macd_signal_enabled = 1
    trading_strategy_enabled = 1

# 订单和仓位管理相关参数
def set_order_and_position_params():
    global min_quantity, step_size, max_position_size, force_reduce
    min_quantity = 0.01
    step_size = 0.001
    max_position_size = 0.1
    force_reduce = 0

# 程序运行和性能参数
def set_program_performance_params():
    global max_run_time, monitoring_interval, order_interval, update_interval, ltime, stime
    max_run_time = 60 * 60 * 24 * 7
    monitoring_interval = 60
    order_interval = 60
    update_interval = 60
    ltime = 55
    stime = 550

# 追加策略相关参数
def set_additional_strategy_params():
    global starta_direction, add_position, add_rate, ts_threshold
    starta_direction = 'lb'
    add_position = min_quantity
    add_rate = 0.006
    ts_threshold = 50

# 配置加载
def load_configuration():
    logger.info("配置加载成功")

# 示例用法
if __name__ == "__main__":
 #   set_trade_and_market_params()
#    set_quantitative_strategy_params()
    #set_order_and_position_params()
   # set_program_performance_params()
  #  set_additional_strategy_params()
    load_configuration()
